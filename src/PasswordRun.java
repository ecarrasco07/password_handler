import java.util.InputMismatchException;
import java.util.Scanner;

public class PasswordRun {

    public static void main(String[] args) throws Exception{
        clear();
        Scanner input = new Scanner(System.in);
        System.out.println("Password Saving Program.");
        run(input);
        
        endProgram();
        input.close();
    }

    //Initially runs the program
    public static void run(Scanner input) throws Exception{
        clear();
        int userInput = welcomeScreen(input);

        //decision for main menu
        switch(userInput){
            case 1:
                clear();
                viewPasswords(input);
                break;
            case 2:
                clear();
                addNewPassword(input);
                run(input);
                break;
            case 3:
                clear();
                generatePassword();
                run(input);
                break;
            case 4:
                clear();
                endProgram();
                break;

        }
    }


    public static int welcomeScreen(Scanner input) throws Exception{
        //Welcome text and avaliable options
        System.out.println("Please enter an option");
        System.out.println("1.) View Passwords");
        System.out.println("2.) Add new password");
        System.out.println("3.) Generate new password");
        System.out.println("4.) Close Program");

        //int userInput = input.nextInt();
        int userInput = checkInput(input, 4, 1);
        return userInput;

    }

    //Method to view passwords 
    //Gives user the option to delete or change a password
    public static void viewPasswords(Scanner input) throws Exception{
        
        PasswordDBConnection db = new PasswordDBConnection();
        int user;

        formatPasswords(db);
        System.out.println("1.) Delete Password\n2.) Change Entry\n3.) Exit to Start Screen");
        
        user = checkInput(input, 3, 1);
        
        //decision for view password menu
        switch(user){
            case 1:
                System.out.println("What enter the id of the entry you would like to delete.");
                String id = input.next();
                db.deleteEntry(id);
              break;
                case 2:
                changeEntry(input);
                break;
            case 3:
                run(input);
                break;
        }
        if(user == 1|| user== 2){
            viewPasswords(input);
        }
        
        
    }

    //Gets password from database and foramts the into a table.
    public static void formatPasswords(PasswordDBConnection db) throws Exception{
       String[][] data = db.viewAll();
       String leftAlignFormat = "| %-2s | %-17s | %-27s | %-27s | %-18s |%n";
    
       System.out.format("+----+-------------------+-----------------------------+-----------------------------+--------------------+%n");
       System.out.format("|ID  | Website Name      |Email Address                |Password                     |Username            |%n");
       System.out.format("+----+-------------------+-----------------------------+-----------------------------+--------------------+%n");
        //insert passwords into table
       for(int i = 0; i < db.getRowNum(); i++){
           System.out.format(leftAlignFormat, data[i][0], data[i][1], data[i][2], data[i][3], data[i][4]);
       }
       System.out.format("+----+-------------------+-----------------------------+-----------------------------+--------------------+%n");

    }

    //method to add new passwords into database
    public static void addNewPassword(Scanner input) throws Exception{
        int userInput;
        
        System.out.println("Would you like to generate a password or use your own?");
        System.out.println("1.) Own Password \n2.) Generate");

        
        userInput = checkInput(input, 2, 1);

        //no password generated
        if(userInput == 1){
            String given = null;
            newEntry(input, given);
        }
        //password is generated by program
        else{
            String given = generatePassword();
            newEntry(input, given);
        }

    }

    //generate a password for the users and returns the password
    public static String generatePassword(){
        PasswordGenerate pass = new PasswordGenerate(16);
        char[] password = pass.generate();
        String fpass = new String(password);
        System.out.println("Your new password is: " +fpass);

        return fpass;
    }

    //helper method for addPassword
    //prmopts the user to for password and other account information
    public static void newEntry(Scanner input, String given) throws Exception{
        //Entry Criteria
        String website, email, password, username;

        //Get information from user
        System.out.println("What is the website name?");
        website = input.next();

        System.out.println("What is the email for your account?");
        email = input.next();

        //get password from user or generate
        if(given == null){
            System.out.println("What is your password?");
            password = input.next(); 
        }else{
            password = given;
        }
        
        System.out.println("What is your username?");
        username = input.next();

        //format information for sql query
        String values = "values(" +
        "'" + website + "', " +
        "'" + email + "', " +
        "'" + password + "', " +
        "'" + username + "')";
        
        //finish sql query
        String sql = "insert into passwords"
        + "(websiteName, email, password, username)" +
        values;

        try{
        PasswordDBConnection db = new PasswordDBConnection();
        db.addPassword(sql);
        }catch(Exception e){
            System.out.println(e);
        }

        //System.out.println(values);
        
    }

    //method to make a change to account information
    //asks the use what information need to be changed
    //method connects to database and then changes entry
    public static void changeEntry(Scanner input) throws Exception{
        String update;
        
        System.out.println("What is the id of the entry you would like to update?");
        String id = input.next();

        System.out.println("Which entry would you like to change?");
        System.out.println("1 - Website Name\n2 - Email Address\n" +
        "3 - Password\n4 - Username");

        int field = input.nextInt();
        switch(field){
            case 1:
             System.out.println("What is the new website name?");
             update = input.next();
             updateStatement(id, update, field);
             break;

            case 2:
             System.out.println("What is the new email address name?");
             update = input.next();
             updateStatement(id, update, field);
             break;

            case 3:
             System.out.println("What is the new password name?");
             update = input.next();
             updateStatement(id, update, field);
             break;

            case 4:
             System.out.println("What is the new username name?");
             update = input.next();
             updateStatement(id, update, field);
             break;
            
        }


    }

    //helper method for changeEntry
    //Established connection to database
    public static void updateStatement(String id, String update, int field) throws Exception{
        
        PasswordDBConnection db = new PasswordDBConnection();
        db.updateEntry(id, update, field);

    }

    //Exit Sceen
   private static void endProgram() {
        clear();
        System.out.println("GoodBye");
    }

    //clears the console
    public static void clear(){
        System.out.print("\033[H\033[2J");
        System.out.flush();
    }


    //upper highest number user can enter
    //lower lowest number user can enter
    public static int checkInput(Scanner input, int upper, int lower) throws InputMismatchException{
        int userInput;

        //Get input from user
        //Makes sure the input is an integer if not Error message is thrown.
        while(true){
            try{
                userInput = input.nextInt();
                break;
            }catch(InputMismatchException e){
                System.out.println("Invalid Input. Please Enter an Integer.");
                input.next();
                
            }
        }
        
        //make sure the userInput is in the range
        while(userInput > upper || userInput < lower){
            System.out.println("Please Enter a valid input inbetween the values " + lower + " and " + upper);
            userInput = input.nextInt();
        }
        
        return userInput;
    }

}